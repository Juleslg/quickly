{%- comment -%}
----------------------------------------------------------------------------------------------------------------------
PRODUCT QUICK BUY
----------------------------------------------------------------------------------------------------------------------

This component is used to render the quick buy content. It is important to note that this snippet must always be
included inside a product template (you can find an example in the "main-product.liquid" section). The reason is that
we want to re-use the settings of the merchant on their product page (which info they want to make it visible). To do
that, we need to re-use the whole product page, and extract the quick-buy part (rendered here).

********************************************
Supported variables
********************************************

* product: the product to render
* section: the section is implicitly available. Here, the section is always a "product" template section, so you can
           access all the information from the section
{%- endcomment -%}

{%- capture product_form_id -%}product-form-{{ product.id }}-{{ section.id }}{%- endcapture -%}

  <template id="quick-buy-content">
    <p class="h5" slot="header">{{ 'product.general.choose_options' | t }}</p>
  
    <div class="quick-buy-modal__content">
      <button type="button" class="quick-buy-modal__close-button sm-max:hidden" is="dialog-close-button">
        <span class="sr-only">{{ 'general.accessibility.close' | t }}</span>
        {%- render 'icon' with 'close' -%}
      </button>
  
      <div class="quick-buy-modal__gallery-wrapper">
        {%- render 'product-gallery',
            product: product,
            desktop_layout: 'carousel_dots',
            mobile_controls: 'arrows',
            enable_media_autoplay: section.settings.enable_media_autoplay,
            enable_video_looping: section.settings.enable_video_looping,
            enable_image_zoom: false
        -%}
        
        <div class="quick-buy-modal__mobile-info v-stack gap-1 justify-center text-center sm:hidden">
          <a href="{{ product.title }}" class="product-title h6">{{ product.title }}</a>
          {% render 'price-list', product: product, variant: product.selected_or_first_available_variant, hide_unit_price: true, form_id: product_form_id, context: 'card' %}
        </div>
      </div>
  
      <div class="quick-buy-modal__info-wrapper">
        {%- assign allow_blocks = '@app,vendor,title,price,payment_terms,separator,variant_picker,product_variations,line_item_property,buy_buttons' | split: ',' -%}
        {%- render 'product-info', product: product, allow_blocks: allow_blocks, update_url: false -%}
  
        <a href="{{ product.url }}" class="quick-buy-modal__view-more link sm-max:hidden">{{ 'product.general.view_details' | t }}</a>
      </div>



{%- comment -%}
----------------------------------------------------------------------------------------------------------------------
BUY BUTTONS
----------------------------------------------------------------------------------------------------------------------

This component is used to show the buy buttons

********************************************
Supported variables
********************************************

* product: the product from which to show the buttons (if empty, a placeholder is displayed)
* show_payment_button: if we show or not the dynamic checkout button
* show_gift_card_recipient: for gift card products, an optional message/email to be sent to the recipient
* atc_button_background: the background of the ATC button
* atc_button_text_color: the color of the ATC button
* payment_button_background: the background of the dynamic payment button
* payment_button_background: the color of the dynamic payment button
* form_id: if specified, define the form ID linked to this input
{%- endcomment -%}

{%- if product != blank -%}
  {%- assign variant_picker_block = section.blocks | where: 'type', 'variant_picker' | first -%}

  {%- form 'product', product, is: 'product-form', id: form_id -%}
    <input type="hidden" {% if variant_picker_block != blank %}disabled{% endif %} name="id" value="{{ product.selected_or_first_available_variant.id }}">

    {% liquid
      assign button_disabled = false

      if product.selected_or_first_available_variant.available == false
        assign button_disabled = true
        assign button_content = 'product.general.sold_out_button' | t
      else
        if product.template_suffix contains 'pre-order'
          assign button_content = 'product.general.pre_order_button' | t
        else
          assign button_content = 'product.general.add_to_cart_button' | t
        endif
      endif
    %}

    <div class="v-stack gap-4">
      {%- if product.gift_card? and show_gift_card_recipient -%}
        <gift-card-recipient class="gift-card-recipient v-stack gap-3">
          {%- assign checkbox_label = 'gift_card.recipient.checkbox' | t -%}
          {%- render 'checkbox', label: checkbox_label, name: 'properties[__shopify_send_gift_card_to_recipient]' -%}

          <div class="gift-card-recipient__fields js:hidden">
            <div class="fieldset">
              {%- liquid
                assign recipient_email_label = 'gift_card.recipient.email_label' | t
                render 'input', type: 'email', label: recipient_email_label, name: 'properties[Recipient email]', value: form.email, required: true

                assign recipient_name_label = 'gift_card.recipient.name_label' | t
                render 'input', label: recipient_name_label, name: 'properties[Recipient name]', value: form.name

                assign message_label = 'gift_card.recipient.message_label' | t
                render 'input', label: message_label, name: 'properties[Recipient message]', value: form.message, multiline: 3, maxlength: 200, show_max_characters_count: true
              -%}
            </div>
          </div>
        </gift-card-recipient>
      {%- endif -%}

      <buy-buttons class="buy-buttons {% if show_payment_button %}buy-buttons--has-dynamic{% endif %}" template="{{ product.template_suffix | escape }}" form="{{ form_id }}">
        {%- if show_payment_button and atc_button_background == blank and atc_button_text_color == blank -%}
          {%- assign atc_button_style = 'outline' -%}
        {%- else -%}
          {%- assign atc_button_style = 'solid' -%}
        {%- endif -%}

        {%- render 'button', content: button_content, type: 'submit', disabled: button_disabled, style: atc_button_style, background: atc_button_background, text_color: atc_button_text_color, stretch: true -%}

        {%- if show_payment_button -%}
          {{- form | payment_button -}}

          <style>
            #shopify-section-{{ section.id }} .shopify-payment-button {
              {%- if payment_button_background != blank and payment_button_background != 'rgba(0,0,0,0)' -%}
                --button-background: {{ payment_button_background.rgb }};
              {%- endif -%}

              {%- if payment_button_text_color != blank and payment_button_text_color != 'rgba(0,0,0,0)' -%}
                --button-text-color: {{ payment_button_text_color.rgb }};
              {%- endif -%}

              {%- unless product.selected_or_first_available_variant.available -%}
                display: none;
              {%- endunless -%}
            }
          </style>
        {%- endif -%}
      </buy-buttons>
    </div>
  {%- endform -%}
{%- else -%}
  <buy-buttons class="buy-buttons" template="{{ product.template_suffix | escape }}" form="{{ form_id }}">
    {%- assign button_content = 'product.general.add_to_cart_button' | t -%}
    {%- render 'button', content: button_content, type: 'submit', background: variant_picker_block.settings.atc_button_background, text_color: variant_picker.settings.atc_button_text_color, stretch: true -%}
  </buy-buttons>
{%- endif -%}




    </div>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const blockSwatches = document.querySelectorAll(".block-swatch");
        const colorSwatches = document.querySelectorAll(".color-swatch-a");
        const colorNamePlaceholder = document.getElementById("color-name-placeholder");
  
        function removeAllSelected() {
          blockSwatches.forEach((swatch) => {
            swatch.classList.remove("is-selected");
          });
        }
  
        blockSwatches.forEach((swatch) => {
          swatch.addEventListener("click", function (event) {
            removeAllSelected();
            this.classList.add("is-selected");
  
            // Debugging line
            console.log("Block Swatch clicked: ", this);
          });
  
          // Prevent clicks on links within block swatches from bubbling up
          const link = swatch.querySelector("a");
          if (link) {
            link.addEventListener("click", function (event) {
              event.stopPropagation();
            });
          }
        });
  
        colorSwatches.forEach((swatch) => {
          swatch.addEventListener("click", function () {
            colorSwatches.forEach((s) => s.classList.remove("selected"));
            this.classList.add("selected");
            const colorName = this.getAttribute("data-color-name");
            colorNamePlaceholder.textContent = `${colorName} test`;
  
            // Debugging line
            console.log("Color Swatch clicked: ", this);
          });
        });
      });
  
    </script>
  </template>